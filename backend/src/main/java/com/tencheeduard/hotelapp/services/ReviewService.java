package com.tencheeduard.hotelapp.services;

import com.tencheeduard.hotelapp.embeddables.RoomId;
import com.tencheeduard.hotelapp.entities.Account;
import com.tencheeduard.hotelapp.entities.Hotel;
import com.tencheeduard.hotelapp.entities.Review;
import com.tencheeduard.hotelapp.entities.Room;
import com.tencheeduard.hotelapp.exceptions.ObjectNotFoundException;
import com.tencheeduard.hotelapp.repositories.AccountRepository;
import com.tencheeduard.hotelapp.repositories.HotelRepository;
import com.tencheeduard.hotelapp.repositories.ReviewRepository;
import com.tencheeduard.hotelapp.repositories.RoomRepository;
import com.tencheeduard.hotelapp.singletons.TimeKeeper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.sql.Date;

@Service
public class ReviewService {

    @Autowired
    ReviewRepository reviewRepository;
    @Autowired
    AccountRepository accountRepository;
    @Autowired
    RoomRepository roomRepository;
    @Autowired
    HotelRepository hotelRepository;

    public Review createReview(String username, Integer roomId, Integer hotelId, String body, Byte rating, Boolean isPublic) throws ObjectNotFoundException, IllegalArgumentException {
        if(rating > 5 || rating < 0)
            throw new IllegalArgumentException();

        if(body.isEmpty())
            body=null;

        Account account = accountRepository.findById(username).orElse(null);
        if(account == null)
            throw new ObjectNotFoundException(Account.class);

        Hotel hotel = hotelRepository.findById(hotelId).orElse(null);
        if(hotel==null)
            throw new ObjectNotFoundException(Hotel.class);

        Room room = roomRepository.findById(new RoomId(hotel, roomId)).orElse(null);
        if(room == null)
            throw new ObjectNotFoundException(Room.class);

        //                                reviewId will be autogenerated anyway
        Review review = new Review(null,room,account,rating,body, TimeKeeper.getDate(), isPublic);
        reviewRepository.save(review);
        return review;
    }
}